import React from 'react';

interface CardanoLoaderSVGProps {
  size?: number;
  className?: string;
  progress?: number; // 0-100 percentage for controlled animation
}

export const CardanoLoaderSVG: React.FC<CardanoLoaderSVGProps> = ({ 
  size = 76, 
  className = '' 
}) => {
  const svgPaths = [
    "M16.4421 27.4588C16.3162 29.6791 18.023 31.5875 20.2467 31.7147C20.3246 31.7187 20.4028 31.721 20.479 31.721C22.6179 31.721 24.3889 30.0501 24.5105 27.9162C24.6371 25.6967 22.9308 23.7875 20.7058 23.6615C18.4681 23.5311 16.5688 25.248 16.4421 27.4588Z",
    "M1.37939 26.4292C0.659828 26.388 0.0423348 26.9373 0.00222106 27.6562C-0.0394749 28.3744 0.510914 28.9911 1.23047 29.0319C1.95082 29.0731 2.56831 28.5226 2.60961 27.8045C2.65011 27.0851 2.09974 26.4696 1.37939 26.4292Z",
    "M16.1859 4.06048C16.8296 3.73707 17.0893 2.95271 16.7649 2.30986C16.4393 1.66739 15.6546 1.40818 15.0101 1.73279C14.3664 2.05619 14.1075 2.84055 14.4319 3.48301C14.7564 4.12627 15.5414 4.38429 16.1859 4.06048Z",
    "M20.2846 11.1946C21.2809 10.6944 21.6812 9.48322 21.1793 8.49C20.6773 7.49639 19.4638 7.09648 18.4678 7.59665C17.4727 8.09763 17.0716 9.30883 17.5743 10.3021C18.0759 11.2961 19.2894 11.6964 20.2846 11.1946Z",
    "M6.49292 16.1C7.26131 16.6029 8.2914 16.3889 8.79533 15.6224C9.29806 14.8563 9.08402 13.8282 8.31682 13.3256C7.54803 12.8227 6.51834 13.0367 6.01481 13.8036C5.51089 14.5697 5.72572 15.5982 6.49292 16.1Z",
    "M8.94746 25.7026C7.83478 25.6391 6.88173 26.4881 6.81779 27.599C6.75426 28.7104 7.60526 29.6612 8.71833 29.7258C9.83142 29.7888 10.7861 28.9391 10.8492 27.8281C10.9115 26.7172 10.0609 25.7648 8.94746 25.7026Z",
    "M6.71297 39.2392C5.89374 39.6514 5.56375 40.6497 5.97713 41.4678C6.39052 42.2858 7.39043 42.6148 8.20966 42.2026C9.02928 41.7896 9.35928 40.7924 8.94549 39.9736C8.5329 39.1559 7.53339 38.8262 6.71297 39.2392Z",
    "M14.5543 21.5409C15.6515 22.259 17.1239 21.9534 17.8423 20.858C18.5618 19.7645 18.2553 18.2948 17.1589 17.5779C16.0621 16.8589 14.59 17.1649 13.8708 18.2588C13.1513 19.3539 13.4575 20.8227 14.5543 21.5409Z",
    "M39.4349 11.0343C40.3673 11.6443 41.6182 11.3847 42.2297 10.4537C42.8416 9.52386 42.5815 8.27499 41.6491 7.66463C40.7171 7.05427 39.4655 7.31347 38.8543 8.24487C38.2428 9.17468 38.5033 10.4243 39.4349 11.0343Z",
    "M43.5767 3.92384C44.1795 4.31859 44.9899 4.15014 45.3855 3.54851C45.7802 2.94607 45.6118 2.13833 45.0086 1.74318C44.4066 1.34844 43.5969 1.51727 43.2002 2.11813C42.8047 2.72095 42.9735 3.52869 43.5767 3.92384Z",
    "M39.7533 23.6202C37.5156 23.4906 35.6151 25.2075 35.49 27.4163C35.3633 29.637 37.0697 31.5461 39.2939 31.6722C39.3713 31.6761 39.4495 31.6789 39.5266 31.6789C41.665 31.6789 43.4357 30.0083 43.5572 27.8756C43.6187 26.7992 43.2562 25.7644 42.5378 24.9614C41.8203 24.1568 40.8307 23.6808 39.7533 23.6202Z",
    "M21.6123 21.2616C22.3025 22.6294 23.6864 23.4803 25.2236 23.4803C25.8486 23.4803 26.4768 23.3305 27.0387 23.0483C29.0282 22.0471 29.8312 19.6176 28.8285 17.6315C28.1375 16.2626 26.754 15.4128 25.2172 15.4128C24.5926 15.4128 23.9644 15.5627 23.4025 15.8445C21.413 16.8452 20.61 19.2744 21.6123 21.2616Z",
    "M53.2861 16.0958C54.1053 15.6836 54.4361 14.686 54.0223 13.8672C53.6085 13.0483 52.6098 12.7198 51.7894 13.1319C50.9698 13.5445 50.6398 14.5417 51.0536 15.3609C51.4673 16.1786 52.4657 16.5076 53.2861 16.0958Z",
    "M43.0386 17.3804C41.8663 17.969 41.3958 19.3946 41.9863 20.5634C42.5763 21.7322 44.0039 22.2023 45.1754 21.6137C46.3465 21.0244 46.8178 19.5991 46.2281 18.4295C45.6372 17.2611 44.2092 16.7907 43.0386 17.3804Z",
    "M29.8478 3.3161C30.7643 3.36802 31.5494 2.66849 31.6022 1.75334C31.6538 0.838983 30.9533 0.0546404 30.0368 0.00271386C29.1195 -0.049201 28.3336 0.649937 28.282 1.56548C28.23 2.48023 28.9305 3.26418 29.8478 3.3161Z",
    "M29.8292 13.7553C31.1389 13.8295 32.2607 12.8303 32.3354 11.5232C32.41 10.2156 31.4085 9.0952 30.0981 9.02149C28.7896 8.94698 27.6678 9.94614 27.5927 11.2537C27.5185 12.5604 28.5196 13.6804 29.8292 13.7553Z",
    "M16.961 37.9547C18.1325 37.3657 18.6038 35.9405 18.0141 34.7717C17.4236 33.6029 15.9948 33.1317 14.8242 33.7218C13.6531 34.3108 13.1818 35.7344 13.7723 36.9044C14.3623 38.0732 15.7899 38.5433 16.961 37.9547Z",
    "M31.3639 17.2138C30.142 19.073 30.6634 21.5779 32.5266 22.7974C33.187 23.2298 33.9522 23.4585 34.7393 23.4585C36.1081 23.4585 37.3713 22.7776 38.1222 21.6369C39.3429 19.7773 38.8215 17.2717 36.9587 16.0533C36.2979 15.6209 35.5335 15.3918 34.7464 15.3918C33.3772 15.3918 32.1136 16.0728 31.3639 17.2138Z",
    "M38.3884 34.0737C37.6974 32.7043 36.3131 31.8538 34.7771 31.8538C34.1516 31.8538 33.5234 32.0028 32.9615 32.2862C31.9978 32.7709 31.2814 33.6012 30.9434 34.625C30.6043 35.6475 30.6857 36.7402 31.1722 37.7025C31.8623 39.0707 33.2462 39.9212 34.7819 39.9212C35.4077 39.9212 36.0355 39.7722 36.5986 39.4892C38.5881 38.4897 39.391 36.0589 38.3884 34.0737Z",
    "M45.4457 33.7931C44.3497 33.0761 42.8768 33.3817 42.1576 34.4756C41.4381 35.5698 41.7454 37.0399 42.8411 37.7576C43.9383 38.475 45.4099 38.1702 46.1299 37.0748C46.849 35.9813 46.5437 34.5112 45.4457 33.7931Z",
    "M53.1809 27.7354C53.2452 26.6245 52.3934 25.6721 51.28 25.609C50.1669 25.5456 49.2134 26.3946 49.1499 27.5071C49.0856 28.6173 49.9374 29.5693 51.0512 29.6327C52.1635 29.6961 53.1182 28.8455 53.1809 27.7354Z",
    "M58.7684 26.3021C58.0472 26.2617 57.4309 26.811 57.3888 27.5304C57.3483 28.2486 57.8987 28.8653 58.6194 28.9057C59.3394 28.9469 59.9565 28.3968 59.9974 27.6782C60.0391 26.9589 59.4883 26.343 58.7684 26.3021Z",
    "M53.5075 39.2338C52.7391 38.7309 51.7086 38.9449 51.2062 39.7114C50.7027 40.4775 50.9164 41.5065 51.6843 42.009C52.452 42.5116 53.4816 42.2979 53.9868 41.5314C54.4895 40.7641 54.2759 39.7368 53.5075 39.2338Z",
    "M16.4241 51.4108C15.8209 51.0156 15.0112 51.1841 14.6157 51.7857C14.2197 52.3886 14.3881 53.1963 14.9913 53.5911C15.5945 53.9866 16.4042 53.8174 16.7993 53.2157C17.1952 52.6129 17.0273 51.8055 16.4241 51.4108Z",
    "M43.8137 51.2742C43.17 51.5972 42.9111 52.3811 43.2359 53.0248C43.5595 53.6669 44.3454 53.9253 44.9903 53.6015C45.6336 53.2773 45.8937 52.4941 45.5689 51.8516C45.244 51.2088 44.4582 50.9504 43.8137 51.2742Z",
    "M28.6353 38.1199C29.2262 37.2195 29.4323 36.1426 29.2123 35.0884C28.9919 34.0337 28.3744 33.1277 27.4718 32.5371C26.811 32.1047 26.0458 31.8752 25.2583 31.8752C23.8907 31.8752 22.6263 32.5562 21.8766 33.6976C21.2849 34.5985 21.08 35.6753 21.3 36.7296C21.5192 37.7839 22.1379 38.6899 23.0401 39.2808C23.7013 39.7136 24.4661 39.9419 25.2532 39.9419C26.6216 39.9419 27.8852 39.261 28.6353 38.1199Z",
    "M20.5642 44.3004C19.6318 43.6901 18.3813 43.9501 17.7697 44.8803C17.1578 45.8109 17.4179 47.0593 18.3503 47.6701C19.2823 48.2801 20.5344 48.0205 21.1455 47.0903C21.7575 46.1585 21.4962 44.9104 20.5642 44.3004Z",
    "M29.9804 52.0179C29.0639 51.9656 28.2788 52.6655 28.2264 53.5799C28.1736 54.4954 28.8745 55.2794 29.7914 55.3317C30.7083 55.3832 31.4942 54.6845 31.5458 53.7689C31.5974 52.8542 30.8973 52.0694 29.9804 52.0179Z",
    "M29.9992 41.579C28.6904 41.5053 27.5678 42.5045 27.4931 43.8112C27.4192 45.1179 28.4199 46.2388 29.7292 46.3121C31.0396 46.3874 32.1615 45.3874 32.2357 44.0807C32.3108 42.774 31.3093 41.6535 29.9992 41.579Z",
    "M39.7147 44.1389C38.7199 44.6407 38.3188 45.8511 38.8212 46.8451C39.3223 47.8395 40.5359 48.2378 41.5318 47.7373C42.5277 47.2367 42.9272 46.0259 42.4261 45.0318C41.9249 44.0382 40.7118 43.6383 39.7147 44.1389Z"
  ];

  return (
    <div 
      className={className}
      style={{
        display: 'flex',
        alignItems: 'center',
        justifyContent: 'center',
        position: 'relative'
      }}
    >
      <svg
        width={size}
        height={size * (56 / 60)}
        viewBox="0 0 60 56"
        fill="none"
        xmlns="http://www.w3.org/2000/svg"
        style={{
          filter: 'drop-shadow(0 0 4px rgba(255, 85, 84, 0.2))',
          transformOrigin: 'center'
        }}
      >
        {/* Gray base layer - always visible */}
        <g>
          {svgPaths.map((path, index) => (
            <path key={`base-${index}`} d={path} className="fill-muted" />
          ))}
        </g>
        
        {/* Red animated overlay layer */}
        <g 
          style={{
            animation: 'cardanoWave 2s infinite ease-in-out',
            animationName: 'cardanoWave'
          }}
        >
          {svgPaths.map((path, index) => (
            <path
              key={`overlay-${index}`}
              d={path}
              style={{ fill: '#ff5554' }}
            />
          ))}
        </g>

        <defs>
          <style>
            {`
              @keyframes cardanoWave {
                0% { clip-path: circle(0% at 50% 50%); }
                100% { clip-path: circle(100% at 50% 50%); }
              }
            `}
          </style>
        </defs>
      </svg>
    </div>
  );
};

export default CardanoLoaderSVG;
